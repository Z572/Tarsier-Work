        -:    0:Source:/home/openeuler/rpmbuild/BUILD/gcc-10.3.0/gcc/testsuite/gcc.misc-tests/gcov-4b.c
        -:    0:Graph:gcov-4b.gcno
        -:    0:Data:gcov-4b.gcda
        -:    0:Runs:1
        -:    1:/* Check that execution counts for various C constructs are reported
        -:    2:   correctly by gcov. */
        -:    3:
        -:    4:/* { dg-options "-fprofile-arcs -ftest-coverage" } */
        -:    5:/* { dg-do run { target native } } */
        -:    6:
        -:    7:extern void abort (void);
        -:    8:
function do_something called 23 returned 100% blocks executed 100%
       23:    9:int do_something (int i)
        -:   10:{
       23:   11:  return i;
        -:   12:}
        -:   13:
        -:   14:/* Check for loops. */
        -:   15:
        -:   16:int for_val1;
        -:   17:int for_val2;
        -:   18:int for_temp;
        -:   19:
        -:   20:int
function test_for1 called 3 returned 100% blocks executed 100%
        3:   21:test_for1 (int n)
        -:   22:{
        -:   23:  int i;
        3:   24:  for_temp = 1;
       12:   25:  for (i = 0; i < n; i++)		/* branch(25) */
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   26:    					/* branch(end) */
        9:   27:    for_temp++;
        3:   28:  return for_temp;
        -:   29:}
        -:   30:
        -:   31:int
function test_for2 called 6 returned 100% blocks executed 100%
        6:   32:test_for2 (int m, int n, int o)
        -:   33:{
        -:   34:  int i, j, k;
        6:   35:  for_temp = 1;
       20:   36:  for (i = 0; i < n; i++)		/* branch(30) */
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:   37:    					/* branch(end) */
       44:   38:    for (j = 0; j < m; j++)		/* branch(32) */
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
        -:   39:    					/* branch(end) */
      111:   40:      for (k = 0; k < o; k++)		/* branch(27) */
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:   41:    					/* branch(end) */
       81:   42:	for_temp++;
        6:   43:  return for_temp;
        -:   44:}
        -:   45:
        -:   46:void
function call_for called 1 returned 100% blocks executed 100%
        1:   47:call_for ()
        -:   48:{
        1:   49:  for_val1 += test_for1 (0);
call    0 returned 100%
        1:   50:  for_val1 += test_for1 (2);
call    0 returned 100%
        1:   51:  for_val1 += test_for1 (7);
call    0 returned 100%
        -:   52:
        1:   53:  for_val2 += test_for2 (0, 0, 0);
call    0 returned 100%
        1:   54:  for_val2 += test_for2 (1, 0, 0);
call    0 returned 100%
        1:   55:  for_val2 += test_for2 (1, 3, 0);
call    0 returned 100%
        1:   56:  for_val2 += test_for2 (1, 3, 1);
call    0 returned 100%
        1:   57:  for_val2 += test_for2 (3, 1, 5);
call    0 returned 100%
        1:   58:  for_val2 += test_for2 (3, 7, 3);
call    0 returned 100%
        1:   59:}
        -:   60:
        -:   61:/* Check the use of goto. */
        -:   62:
        -:   63:int goto_val;
        -:   64:
        -:   65:int
function test_goto1 called 2 returned 100% blocks executed 100%
        2:   66:test_goto1 (int f)
        -:   67:{
        2:   68:  if (f)				/* branch(50) */
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   69:    					/* branch(end) */
        1:   70:    goto lab1;
        1:   71:  return 1;
        1:   72:lab1:
        1:   73:  return 2;
        -:   74:}
        -:   75:
        -:   76:int
function test_goto2 called 2 returned 100% blocks executed 100%
        2:   77:test_goto2 (int f)
        -:   78:{
        -:   79:  int i;
       15:   80:  for (i = 0; i < 10; i++)		/* branch(7) */
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:   81:    					/* branch(end) */
       14:   82:    if (i == f) goto lab2;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1:   83:  return 4;
        1:   84:lab2:
        1:   85:  return 8;
        -:   86:}
        -:   87:
        -:   88:void
function call_goto called 1 returned 100% blocks executed 100%
        1:   89:call_goto ()
        -:   90:{
        1:   91:  goto_val += test_goto1 (0);
call    0 returned 100%
        1:   92:  goto_val += test_goto1 (1);
call    0 returned 100%
        1:   93:  goto_val += test_goto2 (3);
call    0 returned 100%
        1:   94:  goto_val += test_goto2 (30);
call    0 returned 100%
        1:   95:}
        -:   96:
        -:   97:/* Check nested if-then-else statements. */
        -:   98:
        -:   99:int ifelse_val1;
        -:  100:int ifelse_val2;
        -:  101:int ifelse_val3;
        -:  102:
        -:  103:int
function test_ifelse1 called 5 returned 100% blocks executed 93%
        5:  104:test_ifelse1 (int i, int j)
        -:  105:{
        5:  106:  int result = 0;
        5:  107:  if (i)				/* branch(40) */
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  108:    					/* branch(end) */
        3:  109:    if (j)				/* branch(0) */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  110:    					/* branch(end) */
        3:  111:      result = do_something (4);
call    0 returned 100%
        -:  112:    else
    #####:  113:      result = do_something (1024);
call    0 never executed
        -:  114:  else
        2:  115:    if (j)				/* branch(50) */
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  116:    					/* branch(end) */
        1:  117:      result = do_something (1);
call    0 returned 100%
        -:  118:    else
        1:  119:      result = do_something (2);
call    0 returned 100%
        5:  120:  if (i > j)				/* branch(80) */
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  121:    					/* branch(end) */
        1:  122:    result = do_something (result*2);
call    0 returned 100%
        5:  123:  if (i > 10)				/* branch(80) */
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  124:    					/* branch(end) */
        1:  125:    if (j > 10)				/* branch(100) */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  126:      result = do_something (result*4);
call    0 returned 100%
        5:  127:  return result;
        -:  128:}
        -:  129:
        -:  130:int
function test_ifelse2 called 6 returned 100% blocks executed 79%
        6:  131:test_ifelse2 (int i)
        -:  132:{
        6:  133:  int result = 0;
        6:  134:  if (!i)				/* branch(83) */
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  135:    					/* branch(end) */
        1:  136:    result = do_something (1);
call    0 returned 100%
        6:  137:  if (i == 1)				/* branch(100) */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  138:    					/* branch(end) */
    #####:  139:    result = do_something (1024);
call    0 never executed
        6:  140:  if (i == 2)				/* branch(50) */
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  141:    					/* branch(end) */
        3:  142:    result = do_something (2);
call    0 returned 100%
        6:  143:  if (i == 3)				/* branch(67) */
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  144:    					/* branch(end) */
        2:  145:    return do_something (8);
call    0 returned 100%
        4:  146:  if (i == 4)				/* branch(100) */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  147:    					/* branch(end) */
    #####:  148:    return do_something (2048);
call    0 never executed
        4:  149:  return result;
        -:  150:}
        -:  151:
        -:  152:int
function test_ifelse3 called 11 returned 100% blocks executed 100%
       11:  153:test_ifelse3 (int i, int j)
        -:  154:{
       11:  155:  int result = 1;
       11:  156:  if (i > 10 && j > i && j < 20)	/* branch(27 50 75) */
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 25% (fallthrough)
branch  5 taken 75%
        -:  157:    					/* branch(end) */
        1:  158:    result = do_something (16);
call    0 returned 100%
       11:  159:  if (i > 20)				/* branch(55) */
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:  160:    					/* branch(end) */
        5:  161:    if (j > i)				/* branch(60) */
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  162:    					/* branch(end) */
        2:  163:      if (j < 30)			/* branch(50) */
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  164:    					/* branch(end) */
        1:  165:	result = do_something (32);
call    0 returned 100%
       11:  166:  if (i == 3 || j == 47 || i == j)	/* branch(9 10 89) */
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
        -:  167:    					/* branch(end) */
        3:  168:    result = do_something (64);
call    0 returned 100%
       11:  169:  return result;
        -:  170:}
        -:  171:
        -:  172:void
function call_ifelse called 1 returned 100% blocks executed 100%
        1:  173:call_ifelse ()
        -:  174:{
        1:  175:  ifelse_val1 += test_ifelse1 (0, 2);
call    0 returned 100%
        1:  176:  ifelse_val1 += test_ifelse1 (0, 0);
call    0 returned 100%
        1:  177:  ifelse_val1 += test_ifelse1 (1, 2);
call    0 returned 100%
        1:  178:  ifelse_val1 += test_ifelse1 (10, 2);
call    0 returned 100%
        1:  179:  ifelse_val1 += test_ifelse1 (11, 11);
call    0 returned 100%
        -:  180:
        1:  181:  ifelse_val2 += test_ifelse2 (0);
call    0 returned 100%
        1:  182:  ifelse_val2 += test_ifelse2 (2);
call    0 returned 100%
        1:  183:  ifelse_val2 += test_ifelse2 (2);
call    0 returned 100%
        1:  184:  ifelse_val2 += test_ifelse2 (2);
call    0 returned 100%
        1:  185:  ifelse_val2 += test_ifelse2 (3);
call    0 returned 100%
        1:  186:  ifelse_val2 += test_ifelse2 (3);
call    0 returned 100%
        -:  187:
        1:  188:  ifelse_val3 += test_ifelse3 (11, 19);
call    0 returned 100%
        1:  189:  ifelse_val3 += test_ifelse3 (25, 27);
call    0 returned 100%
        1:  190:  ifelse_val3 += test_ifelse3 (11, 22);
call    0 returned 100%
        1:  191:  ifelse_val3 += test_ifelse3 (11, 10);
call    0 returned 100%
        1:  192:  ifelse_val3 += test_ifelse3 (21, 32);
call    0 returned 100%
        1:  193:  ifelse_val3 += test_ifelse3 (21, 20);
call    0 returned 100%
        1:  194:  ifelse_val3 += test_ifelse3 (1, 2);
call    0 returned 100%
        1:  195:  ifelse_val3 += test_ifelse3 (32, 31);
call    0 returned 100%
        1:  196:  ifelse_val3 += test_ifelse3 (3, 0);
call    0 returned 100%
        1:  197:  ifelse_val3 += test_ifelse3 (0, 47);
call    0 returned 100%
        1:  198:  ifelse_val3 += test_ifelse3 (65, 65);
call    0 returned 100%
        1:  199:}
        -:  200:
        -:  201:/* Check switch statements. */
        -:  202:
        -:  203:int switch_val, switch_m;
        -:  204:
        -:  205:int
function test_switch called 5 returned 100% blocks executed 86%
        5:  206:test_switch (int i, int j)
        -:  207:{
        5:  208:  int result = 0;
        -:  209:
        5:  210:  switch (i)				/* branch(20 0 60 20) */
branch  0 taken 20%
branch  1 taken 0%
branch  2 taken 60%
branch  3 taken 20%
        -:  211:    					/* branch(end) */
        -:  212:    {
        1:  213:      case 1:
        1:  214:        result = do_something (2);
call    0 returned 100%
        1:  215:        break;
    #####:  216:      case 2:
    #####:  217:        result = do_something (1024);
call    0 never executed
    #####:  218:        break;
        3:  219:      case 3:
        -:  220:      case 4:
        3:  221:        if (j == 2)			/* branch(67) */
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  222:    					/* branch(end) */
        1:  223:          return do_something (4);
call    0 returned 100%
        2:  224:        result = do_something (8);
call    0 returned 100%
        2:  225:        break;
        1:  226:      default:
        1:  227:	result = do_something (32);
call    0 returned 100%
        1:  228:	switch_m++;
        1:  229:        break;
        -:  230:    }
        4:  231:  return result;
        -:  232:}
        -:  233:
        -:  234:void
function call_switch called 1 returned 100% blocks executed 100%
        1:  235:call_switch ()
        -:  236:{
        1:  237:  switch_val += test_switch (1, 0);
call    0 returned 100%
        1:  238:  switch_val += test_switch (3, 0);
call    0 returned 100%
        1:  239:  switch_val += test_switch (3, 2);
call    0 returned 100%
        1:  240:  switch_val += test_switch (4, 0);
call    0 returned 100%
        1:  241:  switch_val += test_switch (16, 0);	
call    0 returned 100%
        1:  242:  switch_val += switch_m;
        1:  243:}
        -:  244:
        -:  245:int
function main called 1 returned 100% blocks executed 93%
        1:  246:main()
        -:  247:{
        1:  248:  call_for ();
call    0 returned 100%
        1:  249:  call_goto ();
call    0 returned 100%
        1:  250:  call_ifelse ();
call    0 returned 100%
        1:  251:  call_switch ();
call    0 returned 100%
        1:  252:  if ((for_val1 != 12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  253:      || (for_val2 != 87)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  254:      || (goto_val != 15)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  255:      || (ifelse_val1 != 31)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  256:      || (ifelse_val2 != 23)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  257:      || (ifelse_val3 != 246)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  258:      || (switch_val != 55))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  259:    abort ();
call    0 never executed
        1:  260:  return 0;
        -:  261:}
        -:  262:
        -:  263:/* { dg-final { run-gcov branches { -b gcov-4b.c } } } */
