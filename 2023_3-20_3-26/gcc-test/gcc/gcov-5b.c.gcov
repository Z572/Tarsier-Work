        -:    0:Source:/home/openeuler/rpmbuild/BUILD/gcc-10.3.0/gcc/testsuite/gcc.misc-tests/gcov-5b.c
        -:    0:Graph:gcov-5b.gcno
        -:    0:Data:gcov-5b.gcda
        -:    0:Runs:1
        -:    1:/* Check that branch percentages are calculated in variables
        -:    2:   that are large enough to hold the count. */
        -:    3:
        -:    4:/* { dg-options "-fprofile-arcs -ftest-coverage" } */
        -:    5:/* { dg-do run { target native } } */
        -:    6:
        -:    7:#define LIMIT1 7000
        -:    8:#define LIMIT2 7000
        -:    9:
        -:   10:int count;
        -:   11:
function incr_count called 24496500 returned 100% blocks executed 100%
 24496500:   12:void incr_count ()
        -:   13:{
 24496500:   14:  count++;
 24496500:   15:}
        -:   16:
function doit called 49000000 returned 100% blocks executed 100%
 49000000:   17:void doit (int i, int j)
        -:   18:{
 49000000:   19:  if (i > j)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
 24496500:   20:    incr_count ();
call    0 returned 100%
 49000000:   21:}
        -:   22:
function main called 1 returned 100% blocks executed 100%
        1:   23:int main ()
        -:   24:{
        -:   25:  int i, j;
        -:   26:
     7001:   27:  for (i = 0; i < LIMIT1; i++)
branch  0 taken 100%
branch  1 taken 1% (fallthrough)
 49007000:   28:    for (j = 0; j < LIMIT2; j++)
branch  0 taken 100%
branch  1 taken 1% (fallthrough)
 49000000:   29:      doit (i, j);
call    0 returned 100%
        -:   30:
        1:   31:  return 0;
        -:   32:}
        -:   33:
        -:   34:/* { dg-final { run-gcov branches { -b gcov-5b.c } } } */
