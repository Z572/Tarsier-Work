#+title: 为什么要选择 guix

* 概念介绍
guix[fn:1] 是一个纯功能性包管理器支持事务性升级和回滚、非特权软件包管
理、按用户配置文件和垃圾回收,提供了 Nix 首创的可重现性设计、命令行下的
Spack 软件包定制、轻松创建容器镜像等等

在 guix 里，软件包构建和安装过程被视为数学意义上的函数。函数获取输入，
如构建脚本、编译器和库，并且返回一个安装好的软件包。作为一个纯函数，它
的结果只取决于它的输入－－例如，它不能引用没有作为显式输入传入的软件和
脚本。当传入特定的输入时，一个构建函数总是得到相同的结果。它不能以任何
方式修改运行系统的环境，例如，它不能创建，修改，或删除构建和安装环境之
外的文件夹。这是通过在隔离的环境（容器）里运行构建进程实现的，在这个环
境里只能访问到显式的输入。

软件包构建函数的结果被缓存在文件系统里的一个叫做 store 的特殊文件夹内。
每个软件包都被安装在仓库（默认在/gnu/store）里的一个独立的文件夹内。这
个文件夹的名字含有用于构建这个软件包的所有输入的hash，所以，修改输入会
得到一个不同的文件夹名。

* 优势

** nix开创的函数式包管理
这带来了许多高级功能，可复现性，回滚等特性
** 使用可复用的通用语言编写
可以复用及促进生态, 并且允许动态生成包，以及修改包
* 软件包变换
假如 julia 和 octave 软件包依赖于通用的（未优化的） fftw 软件包，这样
我们就可以发布预编译的二进制文件。但如果希望 Octave 使用经过 AVX2 优化的
FFTW，该怎么办？

没关系，guix 支持软件包变换[fn:2]

** 命令行修改软件包

#+begin_src bash
$ guix install octave --with-input=fftw@3.3.5=fftw-avx
#+end_src

让我们安装的 octave 使用 fftw-avx 版本，就是对依赖图进行变换，把依
赖中的 fftw 3.3.5 版本进行替换，然后再对使用新依赖的软件包进行编译，这样我们能够享受到更强劲的性能且给我们带来了很大的灵活性。

还有更多选项:
[[./help-transform.png]]

** 编程方式修改软件包
当我们增加一款软件的 riscv 支持，需要使用真实软件进行测试， 我们可以像下面这样做
#+begin_src scheme
  (use-modules (gnu packages maths)
               (guix packages)
               (guix git-download)
               (gnu packages lua)
               (guix gexp)
               (guix utils)
               (gnu packages games))


  (define luajit/riscv
    (let ((branch "2.1.0-beta3")
          (commit "075c26ca398e88efe5a8246f4f4014e08a4addf9"))
      (package
        (inherit luajit)
        (name "luajit-riscv")
        (version (git-version branch "0" commit))
        (source (origin
                  (method git-fetch)
                  (uri (git-reference
                        (url "https://github.com/plctlab/LuaJIT")
                        (commit commit)))
                  (file-name (git-file-name name version))
                  (sha256
                   (base32
                    "0glid3xv4d9yx9v4zc8771wzldj9rvi5h05cyhm9kgk0ls97ra13"))))
        (arguments
         (substitute-keyword-arguments (package-arguments luajit)
           ((#:phases phases #~%standard-phases)
            #~(modify-phases #$phases
                (delete 'create-luajit-symlink)))))
        (supported-systems (cons "riscv64-linux" (package-supported-systems luajit))))))
  (define replace-luajit-with-riscv-version
    ;; This is a procedure to replace luajit by luajit/riscv,
    ;; recursively.
    (package-input-rewriting `((,luajit . ,luajit/riscv))))

  (replace-luajit-with-riscv-version naev)
#+end_src

这样就以编程方式编译了使用 luajit riscv 版本的 naev

[[./naev.png]]

** --tune

许多软件包可以受益于微架构，就可以在它的 properties 中标上
tunable?，这样在使用 `guix build --tune package` 时
guix 内部会给 gcc/llvm 等设置相关 -march 参数,编译出来优化版本
[[./psascan.png]]


[[./tune.png]]


** glibc-hwcaps[fn:3] （未内置于 guix）

这个功能在guix中还不存在，但是用户可以直接使用guix提供的库来使
glibc-hwcaps 工作

#+begin_src scheme
;; 我们导入相应库
  (use-modules (gnu packages maths)
               (guix packages)
               (guix gexp)
               (guix utils))
;; 定义一个接受 psabi 的函数，它返回一个包
  (define (gsl-hwabi psabi)
    (package
      (inherit gsl)
      (name (string-append "gsl-" psabi))
      (arguments
       (substitute-keyword-arguments (package-arguments gsl)
         ((#:make-flags flags #~'())
          #~(append (list (string-append "CFLAGS=-march=" #$psabi)
                          (string-append "CXXFLAGS=-march=" #$psabi))
                    #$flags))
         ((#:configure-flags flags #~'())
          #~(append (list (string-append "--libdir=" #$output
                                         "/lib/glibc-hwcaps/" #$psabi))
                    #$flags))
         ;; The building machine can't necessarily run the code produced.
         ((#:tests? _ #t) #f)
         ((#:phases phases #~%standard-phases)
          #~(modify-phases #$phases
              (add-after 'install 'remove-extra-files
                (lambda _
                  (for-each (lambda (dir)
                              (delete-file-recursively (string-append #$output dir)))
                            (list (string-append "/lib/glibc-hwcaps/" #$psabi "/pkgconfig")
                                  "/bin" "/include" "/share"))))))))
      (supported-systems '("x86_64-linux" "powerpc64le-linux"))
      (properties `((hidden? . #t)
                    (tunable? . #f)))))

  (define-public gsl-hwcaps
    (package
      (inherit gsl)
      (name "gsl-hwcaps")
      (arguments
       (substitute-keyword-arguments (package-arguments gsl)
         ((#:phases phases #~%standard-phases)
          #~(modify-phases #$phases
              (add-after 'install 'install-optimized-libraries
                (lambda* (#:key inputs outputs #:allow-other-keys)
                  (let ((hwcaps "/lib/glibc-hwcaps/"))
                    (for-each
                     (lambda (psabi)
                       (copy-recursively
                        (string-append (assoc-ref inputs (string-append "gsl-" psabi))
                                       hwcaps psabi)
                        (string-append #$output hwcaps psabi)))
                     '("x86-64-v2" "x86-64-v3" "x86-64-v4")))))))))
      (native-inputs
       (modify-inputs (package-native-inputs gsl)
         (append (gsl-hwabi "x86-64-v2")
                 (gsl-hwabi "x86-64-v3")
                 (gsl-hwabi "x86-64-v4"))))
      (supported-systems '("x86_64-linux"))
      (properties `((tunable? . #f)))))
  gsl-hwcaps
#+end_src

我们编写了这样一个文件，再使用 ~guix install -f 这个文件~ ，无需 guix 官方，
我们自己就能够享受到 glibc-hwcaps 的功能。

** 函数多版本化（未内置于 guix）
见 https://gitlab.inria.fr/guix-hpc/function-multi-versioning 
FMV 是一种技术，编译器根据不同的指令集架构（ISA）扩展生成代码；运行时，加载器会自动选择在主机 CPU 上性能最佳的实现。

只需要下面这几步
- 使用 GCC 的 -fopt-info-vec 选项构建软件包，并抓取所有矢量化机会的源代码位置
- 计算一个补丁，在相关函数上添加 =target_clones= 属性
- 使用该补丁重建软件包

生成的二进制文件就包含多个版本的函数:

#+begin_src bash
$ objdump -t $(GUIX_FMV_PACKAGE=gsl guix build -f function-multi-versioning.scm)/lib/libgsl.so | grep avx | head
000000000009a480 l     F .text	00000000000003f5              bspline_pppack_bsplvd.avx2.0
000000000009a880 l     F .text	0000000000000400              bspline_pppack_bsplvd.arch_skylake_avx512.1
000000000009b080 l     F .text	0000000000000113              gsl_bspline_knots_uniform.avx2.0
000000000009b1a0 l     F .text	00000000000000d8              gsl_bspline_knots_uniform.arch_skylake_avx512.1
000000000009b3a0 l     F .text	000000000000012b              gsl_bspline_knots.avx2.0
000000000009b4d0 l     F .text	000000000000012b              gsl_bspline_knots.arch_skylake_avx512.1
000000000009be70 l     F .text	0000000000000125              gsl_bspline_eval.avx2.0
000000000009bfa0 l     F .text	0000000000000125              gsl_bspline_eval.arch_skylake_avx512.1
000000000009f120 l     F .text	0000000000000071              avl_t_copy.avx2.0
000000000009f1a0 l     F .text	0000000000000071              avl_t_copy.arch_skylake_avx512.1
#+end_src

* 方便的编译及交叉编译软件

因为大部分包都使用 autotools/cmake/meson 等构建工具，并且具有相似的概
念，guix 抽象了包的定义以及编译系统等一系列相关概念，并在命令行界面提
供统一的体验。

而且因为统一在 /gnu/store ，所以多架构支持无需特别设置目录

想要一个在 riscv 上编译的 hello 只需要
#+begin_src bash
  $ file `guix build hello -s riscv64-linux`/bin/hello
  /gnu/store/caxld6zai01mbxdmchidjdaspdj4awj2-hello-2.12.1/bin/hello: ELF 64-bit LSB executable, UCB RISC-V, RVC, double-float ABI, version 1 (SYSV), dynamically linked, interpreter /gnu/store/fpqqyym3w1ym24jr2xiwz94hjfgr5hjm-glibc-2.35/lib/ld-linux-riscv64-lp64d.so.1, for GNU/Linux 2.6.32, stripped
#+end_src

[[./hello-s.png]]

例如一个交叉编译到 riscv64 的 hello
#+begin_src bash
  $ file `guix build hello --target=riscv64-linux-gnu`/bin/hello
  /gnu/store/bksvb3himl1div06vfq9fj3v8z3mm1yl-hello-2.12.1/bin/hello: ELF 64-bit LSB executable, UCB RISC-V, RVC, double-float ABI, version 1 (SYSV), dynamically linked, interpreter /gnu/store/f0rksvsrhzbn4ss4gd4p1s677awfzz08-glibc-cross-riscv64-linux-gnu-2.35/lib/ld-linux-riscv64-lp64d.so.1, for GNU/Linux 2.6.32, stripped
#+end_src
[[./hello-c.png]]

当前支持这些系统上的编译
#+begin_src bash
$ guix build --list-systems
The available systems are:

   - x86_64-linux [current] 
   - aarch64-linux 
   - armhf-linux 
   - i586-gnu 
   - i686-linux 
   - mips64el-linux 
   - powerpc-linux 
   - powerpc64le-linux 
   - riscv64-linux
#+end_src

当前支持编译到这些目标
#+begin_src bash
$ guix build --list-targets
The available targets are:

   - aarch64-linux-gnu 
   - arm-linux-gnueabihf 
   - avr 
   - i586-pc-gnu 
   - i686-linux-gnu 
   - i686-w64-mingw32 
   - mips64el-linux-gnu 
   - or1k-elf 
   - powerpc-linux-gnu 
   - powerpc64-linux-gnu 
   - powerpc64le-linux-gnu 
   - riscv64-linux-gnu 
   - x86_64-linux-gnu 
   - x86_64-linux-gnux32 
   - x86_64-w64-mingw32
#+end_src

这是如何做到的呢？
** 本地编译
*** qemu 模拟编译
当我们设置了 binfmt 和 qemu(等 guix 支持了 binfmt_misc namespace就无需用户设置了)，guix 能够检测到支持，并且自动使用 qemu-user 进行编译。

*** 分派到 riscv 机器上[fn:4]
当我们把装了 guix 的 riscv 机器设置加入本地 ~/etc/guix/machines.scm~
并且相互信任，本地的 guix 就能够把这个任务通过 ssh 卸载到 riscv 机器上，让
riscv 机器上的 guix 进行编译，成功之后拉回来。

#+begin_src scheme
  (list (build-machine
       (name "fedora-riscv")
       (systems (list "riscv64-linux"))
       (host-key "ssh-ed25519 xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
       (user "z572")
       (speed 2.)
       (parallel-builds 5)
       (private-key "/path/to/private-key")))
#+end_src

** 交叉编译
guix的 build-system 能够区分交叉编译和本地编译的不同，在交叉环境下会增
加额外需要的软件及修改相应步骤，只要软件比较正常，就能一键编译。

（当前的缺点是无法隔离 binfmt_misc，因此会泄漏到编译环境，让原本无法编
译通过的包可以通过，影响可复现性，幸好最近 linux 6.7 增加了
binfmt_misc namespace 的支持[fn:5]，未来可以改进这一点）
* 时光机
这是怎么做到的呢？因为每个 commit 的 guix 都拥有当前的软件依赖图，那么
只要当前的 guix 与目标的 guix 通信，让它去编译，就能还原环境。
** 过去
假如我编写了一本关于 riscv 的书，需要使用 qemu 进行实验，我可以选择常用
的 ubuntu linux，并根据当时的 qemu 的行为进行编写，但当几年过去 qemu
的行为改了，新版本的QEMU需要在SBI中初始化PMP才能运行，但书没法改，该怎
么办呢？

要么让读者找到旧版本的 qemu 要么提供虚拟机镜像，或者。。可以使用
guix!
#+begin_src bash
  $ guix time-machine -q --commit=3778b3d9d013a443eec7990c31f47f887f72fe59 \
    -- environment --ad-hoc qemu-minimal \
    -- qemu-img --version
guile: warning: failed to install locale
qemu-img version 4.2.0
Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers

#+end_src
[[./qemu-old.png]]

因为 guix 捕获了所有依赖，并且明确知道这些包是可复现[fn:6]的，所以在
2024 年的今天，我们再次编译它出来的 qemu[fn:7] 就和几年前的 qemu 是同一个软
件，我们就能使用它就像几年前一样。

甚至如果我一开始就使用 guix 搭建环境并提供 guix 的相应提交[fn:8]及使用到的软
件包，别人就能轻松复现我的环境进行实验！

** 未来

当上游发生了大更新（例如 plasma 6 更新[fn:9]），但我不想更新系统，免得被新 bug 妨碍，但我真的需要新加入的某个软件/新功能，我就拿出时光机，临时到达未来


[[./guix-time.png]]

** 平行世界

当有人写了些有趣的功能，但没有合并到 guix 主线，例如 gsoc 有人编写了查看 log 的命令，

#+begin_src bash
guix time-machine -q --branch=wip-guix-log -- git log --oneline|less
#+end_src

[[./git-log.png]]

我们来到了具有 `guix git log` 命令的平行世界！

* 还有更多...
- 多设备/集群管理 (guix delpoy)[fn:10]
- 开发环境管理隔离 (guix shell[fn:11]/guix environment)
- 支持 hurd[fn:12]
- 事务性软件包升级和回滚(guix package)[fn:13]
- 系统管理(guix system)[fn:14]
- 家庭环境管理(guix home)[fn:15]
- 支持使用 tmpfs 的 / (我自己糊的，没链接)
- 无 root 权限安装使用软件及导入到 docker (guix pack)[fn:16]
- 现代版本的 lisp machine
- Full-Source Bootstrap[fn:17](现在只支持 x86_64 和 arm64，riscv64 版本[fn:18]的在做)

* guix 当前状况

平均每个月 100 余人提交贡献，在 x86_64 上拥有 29'000 多个包(如果加上
guix-science[fn:19] 提供的一系列 channel 就超过 52,000 多个包)，全部为
自由软件，但 riscv 支持不太行，虽然拥有 26'750 个软件 ，但系统只支持
HiFive Unmatched，编译机只有一台 HiFive Unmatched。而且许多特性还没有
支持 riscv


* 下一步可能要做的事

- 让 guix pack 依赖的 proot 支持riscv
- 修正 guile 在 riscv 上的 jit 支持
- 改进 guix 包的交叉编译状况
- 改进 guix 包在riscv下的编译状况
- 提高 guix 命令对交叉编译的支持情况
- 增加 guix system 对 riscv 开发板的适配
- 对 --tune 选项增加riscv支持

* 还有一些资料

- https://guix.gnu.org/ :: guix 官网
- https://hpc.guix.info :: guix-hpc 官网
- https://github.com/guixcn/ :: guix 中文社区
- https://mirror.sjtu.edu.cn/docs/guix :: 国内镜像
- https://libreplanet.org/wiki/Group:Guix :: wiki
- http://web.archive.org/web/20230927022235/https://jobs.inria.fr/public/classic/en/offres/2023-06635 :: 法国 NumPEx project 招聘人使用 guix 进行软件部署
- https://carrv.github.io/2022/papers/CARRV2022_paper_1_Batten.pdf :: The Case for Using Guix to EnableReproducible RISC-V Software & Hardware
- https://www.nature.com/articles/s41597-022-01720-9.pdf :: toward practical transparent verifiable and long-term reproducible research using Guix
- https://www.gem5.org/project/2022/05/23/guix.html :: 介绍了使用 guix 打包 gem5 的好处
- https://bitcoinmagazine.com/technical/guix-makes-bitcoin-core-development-trustless :: bitcoin-core 使用 guix 进行可复现验证
- https://www.ncbi.nlm.nih.gov/pubmed/30277498 :: PiGx: reproducible genomics analysis pipelines with GNU Guix
- https://10years.guix.gnu.org/video/gnu-guix-and-the-risc-v-future/

* Footnotes

[fn:1] “Guix”读做“geeks”，或“ɡiːks”（国际音标）

[fn:2] https://guix.gnu.org/manual/devel/en/html_node/Package-Transformation-Options.html

[fn:3] https://guix.gnu.org/en/blog/2024/building-packages-targeting-psabis/

[fn:4] 见 https://guix.gnu.org/en/manual/devel/en/html_node/Daemon-Offload-Setup.html

[fn:5] https://patchwork.kernel.org/project/linux-fsdevel/cover/20181010161430.11633-1-laurent@vivier.eu/

[fn:6] 现在还是有很多包不太行，例如测试需要证书，当回溯到过去就会遇到
时光炸弹。需要停止时间同步加设置时间等操作,还有人修改了源文件，hash不
匹配了之类的问题

[fn:7] 但其实当时guix的qemu 没有开启 riscv 支持

[fn:8] 编写此文时我的提交 f00f56514d90ebba5d9e08ec786c8118e437097c

[fn:9]我在更新，但现在还没有

[fn:10] https://guix.gnu.org/manual/devel/en/html_node/Invoking-guix-deploy.html

[fn:11] https://guix.gnu.org/en/manual/devel/en/html_node/Invoking-guix-shell.html

[fn:12] https://guix.gnu.org/en/blog/2020/a-hello-world-virtual-machine-running-the-hurd/

[fn:13] https://guix.gnu.org/manual/devel/en/html_node/Invoking-guix-package.html

[fn:14]https://guix.gnu.org/manual/devel/en/html_node/System-Configuration.html

[fn:15] https://guix.gnu.org/manual/devel/en/html_node/Home-Configuration.html

[fn:16] https://guix.gnu.org/manual/en/html_node/Invoking-guix-pack.html

[fn:17] https://guix.gnu.org/manual/devel/en/html_node/Full_002dSource-Bootstrap.html

[fn:18] https://nlnet.nl/project/GNUMes-RISCV-bootstrap/

[fn:19] https://github.com/guix-science
